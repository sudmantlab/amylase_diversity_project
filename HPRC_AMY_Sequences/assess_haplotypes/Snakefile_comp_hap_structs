#!vim set syntax=vim

import pandas as pd
import pdb
import itertools
import numpy as np


rule all:
    input:
        "output/haplotype_struc_dists.tsv" 

def get_edit_dist(a,b,b_lens):
    #assumes a and b are same len
    #weighted by length of segment
    d = 0
    t = 0
    for j in range(len(a)):
        max_d = max([b_lens[a[j]], b_lens[b[j]]])
        if a[j]!=b[j]: 
            d+=max_d
        t = t + max_d

    return float(d)/t

#sw modified from https://tiefenauer.github.io/blog/smith-waterman/
#heavily modified... :)
def aln(a, b, t_blens, match_score=2, mismatch_score=2, gap_cost=2):

    b_lens = {}
    for i, r in t_blens.iterrows():
        b_lens[str(r['bID_d'])] = r["l"]
    b_lens["..."] = 0
        
    H = np.zeros((len(a) + 1, len(b) + 1), np.int)
    #Use F to store where we came from 0 is diag, 1 is above 2 left
    F = np.zeros((len(a) + 1, len(b) + 1), np.int)
    
    H[:,0] =np.arange(0,-1*H.shape[0]*gap_cost,-gap_cost)
    H[0,:] =np.arange(0,-1*H.shape[1]*gap_cost,-gap_cost)

    for i, j in itertools.product(range(1, H.shape[0]), range(1, H.shape[1])):
        match = H[i - 1, j - 1] + (match_score if a[i - 1] == b[j - 1] else - mismatch_score)
        delete = H[i - 1, j] - gap_cost
        insert = H[i, j - 1] - gap_cost
        H[i, j] = max(match, delete, insert)
        F[i, j] = np.argmax([match, delete, insert])
    
    curr = (H.shape[0]-1, H.shape[1]-1)
    score = H[curr] 
    path = [curr]
    a_aln, b_aln = [], []
    while curr != (0,0):
        n = [(curr[0]-1,curr[1]-1),
             (curr[0]-1,curr[1]),
             (curr[0],curr[1]-1)]
        next_cell = n[F[curr]]
        n_i, n_j = next_cell

        n_a = [a[n_i],a[n_i],"..."]
        n_b = [b[n_j],"...",b[n_j]]
        a_aln.append(n_a[F[curr]])
        b_aln.append(n_b[F[curr]])
        curr = next_cell
        path.append(curr)
    #return H, F, a_lan, b_aln
    a_aln.reverse()
    b_aln.reverse()
    e = get_edit_dist(a_aln, b_aln, b_lens)
    return score,e, a_aln, b_aln

    
rule compare:
    input:
        "output/haplotype_representative_structures_rep.tsv",
        "output/bundle_lengths.tsv"
    output:
        "output/haplotype_struc_dists.tsv" 
    run:
        t = pd.read_csv(input[0], header=0, sep="\t")
        t_blens = pd.read_csv(input[1], header=0, sep="\t")
        outrows = []
        for s1 in t['hap_struc_d']:
            for s2 in t['hap_struc_d']:
                s, e, a, b = aln(s1.split("-"),s2.split("-"),t_blens)
                #print(s,e)
                print(a)
                print(b)
                #pdb.set_trace()
                outrows.append({"hap1":s1,
                                "hap2":s2,
                                "aln1":"-".join(a),
                                "aln2":"-".join(b),
                                "edit_d":e,
                                "score":s})
        t = pd.DataFrame(outrows)
        t.to_csv(output[0], sep="\t", index=False)

