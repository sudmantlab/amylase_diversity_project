#!vim set syntax=python
import pandas as pd
import numpy as np
import pyd4 as d4
import pdb


configfile: "configs/allsamples_config.json"
configfile: "./configs/genotype_loci.json"

#def get_all_inputs(wildcards):
#    inputs = []
#    for locus, inf in config['loci'].items():
#        inputs.append("output/genotype/amylase_genotypes.tsv".format(locus=locus))
#    return inputs

rule all:
    input:
        "output/genotype/AMYLASE/genotypes.tsv",
        "output/genotype/RHD/genotypes.tsv"

def get_sample_inputs(wildcards):
    inputs = []
    for sample, path in config['sample_paths'].items():
        inputs.append("output/genotype/{locus}/by_indiv/{sample}.tsv".format(sample=sample,
                                                                             locus=wildcards.locus))
    return inputs

rule combine:
    input:
        get_sample_inputs
    output:
        "output/genotype/{locus}/genotypes.tsv"
    run:
        cmd = "cat output/genotype/{locus}/by_indiv/* >{output}".format(locus=wildcards.locus,
                                                                        output=output[0])
        shell(cmd)
        t = pd.read_csv(output[0], 
                        sep="\t",
                        names=["locus",
                                "contig",
                                "start",
                                "end",
                                "cp",
                                "cp_alt",
                                "raw",
                                "sample"])
        t.to_csv(output[0], sep="\t", index=False)

rule get_copy_cvg:
    output:
        "output/genotype/{locus}/by_indiv/{sample}.tsv"
    run:
        fn_d4 = config['sample_paths'][wildcards.sample]
        
        fn_loci = "configs/genotype_loci.json"
        cmd = ("python d4_stats.py genotype "
               "--d4_file {fn_d4} "
               "--sample {sample} "
               "--fn_stats output/correction_factors/correction_factors.tsv "
               "--fn_loci {fn_loci} "
               "--locus_key {locus} "
               "--fn_out {fout}".format(fn_d4 = fn_d4,
                                        fn_loci = fn_loci,
                                        locus = wildcards.locus,
                                        sample=wildcards.sample,
                                        fout = output[0]))
        shell(cmd)

